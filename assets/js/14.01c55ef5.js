(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{286:function(t,e,r){"use strict";r.r(e);var v=r(14),s=Object(v.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"docker容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker容器"}},[t._v("#")]),t._v(" Docker容器")]),t._v(" "),e("h2",{attrs:{id:"docker使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker使用"}},[t._v("#")]),t._v(" Docker使用")]),t._v(" "),e("h3",{attrs:{id:"docker允许简单的程序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker允许简单的程序"}},[t._v("#")]),t._v(" Docker允许简单的程序")]),t._v(" "),e("p",[t._v("Docker 允许你在容器内运行应用程序， 使用 "),e("strong",[t._v("docker run")]),t._v(" 命令来在容器内运行一个应用程序。")]),t._v(" "),e("p",[t._v("输出Hello world")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('docker run ubuntu:15.10 /bin/echo "Hello world"\n')])])]),e("blockquote",[e("p",[t._v("各个参数解析：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("docker:")]),t._v(" Docker 的二进制执行文件。")]),t._v(" "),e("li",[e("strong",[t._v("run:")]),t._v(" 与前面的 docker 组合来运行一个容器。")]),t._v(" "),e("li",[e("strong",[t._v("ubuntu:15.10")]),t._v(" 指定要运行的镜像，Docker 首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。")]),t._v(" "),e("li",[e("strong",[t._v('/bin/echo "Hello world":')]),t._v(" 在启动的容器里执行的命令")])])]),t._v(" "),e("p",[t._v('以上命令完整的意思可以解释为：Docker 以 ubuntu15.10 镜像创建一个新容器，然后在容器里执行 bin/echo "Hello world"，然后输出结果')]),t._v(" "),e("h3",{attrs:{id:"运行交互式的容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行交互式的容器"}},[t._v("#")]),t._v(" 运行交互式的容器")]),t._v(" "),e("p",[t._v('我们通过 docker 的两个参数 -i -t，让 docker 运行的容器实现**"对话"**的能力：')]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("docker run -i -t ubuntu:15.10 /bin/bash\n")])])]),e("p",[t._v("各个参数解析：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("-t:")]),t._v(" 在新容器内指定一个伪终端或终端。")]),t._v(" "),e("li",[e("strong",[t._v("-i:")]),t._v(" 允许你对容器内的标准输入 (STDIN) 进行交互。")])]),t._v(" "),e("p",[t._v("注意第二行 "),e("strong",[t._v("root@0123ce188bd8:/#")]),t._v("，此时我们已进入一个 ubuntu15.10 系统的容器")]),t._v(" "),e("p",[t._v("我们尝试在容器中运行命令 "),e("strong",[t._v("cat /proc/version")]),t._v("和"),e("strong",[t._v("ls")]),t._v("分别查看当前系统的版本信息和当前目录下的文件列表")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" cat /proc/version\n \n ls\n")])])]),e("p",[t._v("通过运行 exit 命令或者使用 CTRL+D 来退出容器")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("exit\n")])])]),e("h3",{attrs:{id:"启动容器-后台模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动容器-后台模式"}},[t._v("#")]),t._v(" 启动容器（后台模式）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('docker run -d ubuntu:15.10 /bin/sh -c "while true; do echo hello world; sleep 1; done"\n')])])]),e("p",[t._v('在输出中，我们没有看到期望的 "hello world"，而是一串长字符')]),t._v(" "),e("p",[e("strong",[t._v("2b1b7a428627c51ab8810d541d759f072b4fc75487eed05812646b8534a2fe63")])]),t._v(" "),e("p",[t._v("这个长字符串叫做容器 ID，对每个容器来说都是唯一的，我们可以通过容器 ID 来查看对应的容器发生了什么。")]),t._v(" "),e("p",[t._v("首先，我们需要确认容器有在运行，可以通过 "),e("strong",[t._v("docker ps")]),t._v(" 来查看：")]),t._v(" "),e("p",[e("strong",[t._v("CONTAINER ID:")]),t._v(" 容器 ID。")]),t._v(" "),e("p",[e("strong",[t._v("IMAGE:")]),t._v(" 使用的镜像。")]),t._v(" "),e("p",[e("strong",[t._v("COMMAND:")]),t._v(" 启动容器时运行的命令。")]),t._v(" "),e("p",[e("strong",[t._v("CREATED:")]),t._v(" 容器的创建时间。")]),t._v(" "),e("p",[e("strong",[t._v("STATUS:")]),t._v(" 容器状态。")]),t._v(" "),e("p",[t._v("状态有7种：")]),t._v(" "),e("ul",[e("li",[t._v("created（已创建）")]),t._v(" "),e("li",[t._v("restarting（重启中）")]),t._v(" "),e("li",[t._v("running 或 Up（运行中）")]),t._v(" "),e("li",[t._v("removing（迁移中）")]),t._v(" "),e("li",[t._v("paused（暂停）")]),t._v(" "),e("li",[t._v("exited（停止）")]),t._v(" "),e("li",[t._v("dead（死亡）")])]),t._v(" "),e("p",[e("strong",[t._v("PORTS:")]),t._v(" 容器的端口信息和使用的连接类型（tcp\\udp）。")]),t._v(" "),e("p",[e("strong",[t._v("NAMES:")]),t._v(" 自动分配的容器名称。")]),t._v(" "),e("p",[t._v("在宿主主机内使用 "),e("strong",[t._v("docker logs")]),t._v(" 命令，查看容器内的标准输出：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("docker logs id\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" docker stop id//停止容器\n")])])]),e("p",[t._v("可以看到容器已经不在了。")]),t._v(" "),e("p",[t._v("也可以用下面的命令来停止: docker stop amazing_cori")])])}),[],!1,null,null,null);e.default=s.exports}}]);